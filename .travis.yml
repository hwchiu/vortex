language: go

sudo: required

services:
  - docker

dist: xenial

go:
  - "1.10.x"

cache:
  directories:
    - $HOME/.cache/go-build
    - $GOPATH/.cache/govendor

env:
  - CHANGE_MINIKUBE_NONE_USER=true

before_install:
    - go get -u github.com/kardianos/govendor
    - sudo apt-get install -y socat openvswitch-switch jq
    - sudo pip install yq
    - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
    - curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz > helm-v2.9.1-linux-amd64.tar.gz && tar -zxvf helm-v2.9.1-linux-amd64.tar.gz && chmod +x linux-amd64/helm && sudo mv linux-amd64/helm /usr/local/bin/helm

before_script:
    # Make root mounted as rshared to fix kube-dns issues.
  - sudo mount --make-rshared /
    # Make /sys mounted as rshared to support cadvisor
  - sudo mount --make-rshared /sys
    # Download kubectl, which is a requirement for using minikube.
  - sudo minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=v1.9.0 --extra-config=apiserver.Authorization.Mode=RBAC
    # Fix the kubectl context, as it's often stale.
  - minikube update-context
    # Install nsenter
  - docker run -v /usr/local/bin:/hostbin hwchiu/ubuntu-nsenter cp /nsenter /hostbin/nsenter
    # Initial helm
  - make apps.init-helm
    # Check if tiller is ready
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lname=tiller -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; echo "wait the tiller to be available"; done
    # Wait for Kubernetes to be up and ready.
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
    # # Enable rbac.
  - kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
    # Launch apps (mongodb, prometheus)
  - make apps.launch-testing
    # Check if prometheus is ready
  - until curl --connect-timeout 1 -sL -w "%{http_code}\\n" http://`kubectl get service -n vortex prometheus -o jsonpath="{.spec.clusterIP}"`:9090/api/v1/query?query=prometheus_build_info -o /dev/null | grep 200; do sleep 1; echo "wait the prometheus to be available"; kubectl get pods --all-namespaces; done
  - until [ `kubectl  -n vortex get --no-headers pods | awk '{c[$3]++}END{ print NR-c["Running"]}'` -eq 0 ]; do sleep 1; echo "wait all pod running"; kubectl -n vortex get pods;  done

jobs:
  include:
    - stage: "Tests"
      name: "Unit Test"
      script: 
        # DEBUG: first two lines is for debug
        - kubectl get pods --all-namespaces
        - kubectl get service --all-namespaces
        - make pre-build && sudo -E PATH=$PATH TEST_GRPC=1 TEST_PROMETHEUS=1 make src.test-coverage-minikube
      after_success:
        - cp build/src/coverage.txt coverage.txt
        - bash <(curl -s https://codecov.io/bash)
    - name: "Integration Tests"
      install:
          - sudo add-apt-repository ppa:duggan/bats --yes
          - sudo apt-get update -q
          - sudo apt-get install -qqy httpie bats nfs-kernel-server
          - sudo pip install -U httpie-jwt-auth
          - sudo mkdir -p /nfsshare/mongodb
          - sudo mkdir -p /nfsshare/influxdb
          - sudo mkdir -p /nfsshare/user
          - echo "/nfsshare *(rw,sync,no_root_squash)" | sudo tee /etc/exports
          - sudo exportfs -r
          - sudo showmount -e
      script:
        - make build
        - sudo make src.test-bats
